"""
Market Research Agent for MyStartup.ai
ASI Alliance Hackathon Submission - Innovation Lab

This agent performs intelligent market research for startup ideas using AI.
It integrates with the MyStartup.ai platform and is discoverable via ASI:One.
"""

from datetime import datetime
from uuid import uuid4
import os
import requests
from uagents import Agent, Context, Protocol
from uagents_core.contrib.protocols.chat import (
    ChatAcknowledgement,
    ChatMessage,
    EndSessionContent,
    StartSessionContent,
    TextContent,
    chat_protocol_spec,
)

# Initialize the Market Research Agent
agent = Agent(
    name="market_research_agent",
    seed="mystartup_market_research_seed_phrase",
    port=8001,
    endpoint=["http://localhost:8001/submit"],
)

# Backend API configuration
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:5000")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Initialize the chat protocol
chat_proto = Protocol(spec=chat_protocol_spec)


def create_text_chat(text: str, end_session: bool = False) -> ChatMessage:
    """Create a ChatMessage with text content"""
    content = [TextContent(type="text", text=text)]
    return ChatMessage(
        timestamp=datetime.utcnow(),
        msg_id=uuid4(),
        content=content,
    )


async def perform_market_research(idea: str) -> dict:
    """
    Perform market research analysis using OpenAI API
    This connects to the existing MyStartup.ai backend logic
    """
    try:
        # Call the MyStartup.ai backend API for market research
        response = requests.post(
            f"{BACKEND_URL}/api/market-research/analyze",
            json={"idea": idea},
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {
                "error": f"Backend API error: {response.status_code}",
                "fallback": True
            }
    except Exception as e:
        # Fallback: Direct OpenAI call if backend is unavailable
        return {
            "error": str(e),
            "message": "Market research analysis requires backend connection",
            "fallback": True
        }


@chat_proto.on_message(ChatMessage)
async def handle_message(ctx: Context, sender: str, msg: ChatMessage):
    """Handle incoming chat messages from users or other agents"""
    ctx.logger.info(f"📨 Received message from {sender}")
    
    # Send acknowledgement
    await ctx.send(
        sender,
        ChatAcknowledgement(
            timestamp=datetime.utcnow(),
            acknowledged_msg_id=msg.msg_id
        )
    )
    
    # Process each content item
    for item in msg.content:
        if isinstance(item, StartSessionContent):
            ctx.logger.info(f"🚀 Session started with {sender}")
            welcome_msg = create_text_chat(
                "Welcome to MyStartup.ai Market Research Agent! "
                "I can analyze your startup idea and provide market insights. "
                "Just describe your startup idea and I'll get to work!"
            )
            await ctx.send(sender, welcome_msg)
        
        elif isinstance(item, TextContent):
            ctx.logger.info(f"💬 Text message from {sender}: {item.text}")
            
            # Check if this is a market research request
            startup_idea = item.text
            
            # Send processing message
            processing_msg = create_text_chat(
                "🔍 Analyzing your startup idea... This may take a moment."
            )
            await ctx.send(sender, processing_msg)
            
            # Perform market research
            result = await perform_market_research(startup_idea)
            
            if result.get("fallback"):
                response_text = (
                    "⚠️ I'm having trouble connecting to the main analysis engine. "
                    "Please try again or contact support."
                )
            else:
                # Format the market research results
                response_text = (
                    f"📊 Market Research Analysis Complete!\n\n"
                    f"**Startup Idea:** {startup_idea}\n\n"
                    f"**Analysis Results:**\n"
                    f"{result.get('analysis', 'Analysis in progress...')}\n\n"
                    f"Generated by MyStartup.ai Market Research Agent"
                )
            
            # Send results
            response_msg = create_text_chat(response_text)
            await ctx.send(sender, response_msg)
        
        elif isinstance(item, EndSessionContent):
            ctx.logger.info(f"👋 Session ended with {sender}")
            goodbye_msg = create_text_chat(
                "Thank you for using MyStartup.ai Market Research Agent! "
                "Good luck with your startup journey! 🚀"
            )
            await ctx.send(sender, goodbye_msg)
        
        else:
            ctx.logger.warning(f"⚠️ Received unexpected content type from {sender}")


@chat_proto.on_message(ChatAcknowledgement)
async def handle_acknowledgement(ctx: Context, sender: str, msg: ChatAcknowledgement):
    """Handle acknowledgements for sent messages"""
    ctx.logger.info(
        f"✅ Received acknowledgement from {sender} "
        f"for message {msg.acknowledged_msg_id}"
    )


# Startup event
@agent.on_event("startup")
async def startup(ctx: Context):
    """Log agent startup"""
    ctx.logger.info("=" * 50)
    ctx.logger.info("🤖 MyStartup.ai Market Research Agent")
    ctx.logger.info("=" * 50)
    ctx.logger.info(f"Agent Name: {agent.name}")
    ctx.logger.info(f"Agent Address: {agent.address}")
    ctx.logger.info(f"Backend URL: {BACKEND_URL}")
    ctx.logger.info("Status: Ready to perform market research!")
    ctx.logger.info("=" * 50)


# Include the chat protocol and publish manifest to Agentverse
agent.include(chat_proto, publish_manifest=True)


if __name__ == "__main__":
    # Run the agent
    agent.run()
